{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://ddebby.github.io/EbbyNotes/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ddebby.github.io/EbbyNotes/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Pathlib Python的路径管理库",
            "content": ". 摘要： 整理了Pathlib的使用方法，便于速查。 . Pathlib使用方法归纳 . 常用操作 . from pathlib import Path . p1 = Path() print(p1) . . . 路径 . p1.cwd() . PosixPath(&#39;/data/home/gaoc/data/1.fast.ai/nbs/dl1&#39;) . # 返回一个新的路径，这个新路径就是当前Path对象的绝对路径 p1.resolve() . PosixPath(&#39;/data/home/gaoc/data/1.fast.ai/nbs/dl1&#39;) . # 也可以获取绝对路径，但是推荐使用resolve() p1.absolute() . PosixPath(&#39;/data/home/gaoc/data/1.fast.ai/nbs/dl1&#39;) . 获取文件名，文件后缀，文件目录 . name: 目录的最后一个部分 | suffix:目录中最后一个部分的扩展名 | stem：目录最后一个部分，没有后缀 | suffixes：返回多个扩展名列表 | with_suffix(suffix)：补充扩展名到尾部，扩展名存在无效 | with_name(name)：替换目录最后一个部分并返回一个新的路径 | . p2 = Path(&#39;/data/home/gaoc/data/99.test/Untitled.ipynb.test&#39;) p2.name . &#39;Untitled.ipynb&#39; . p2.stem . &#39;Untitled&#39; . p2.suffix . &#39;.ipynb&#39; . p2.suffixes . [&#39;.ipynb&#39;, &#39;.test&#39;] . p2.parent . PosixPath(&#39;/data/home/gaoc/data/99.test&#39;) . # 返回一个iterable, 包含所有父目录 for i in p2.parents: print(i) . /data/home/gaoc/data/99.test /data/home/gaoc/data /data/home/gaoc /data/home /data / . 拼接、检查与分解 . 操作符：/ Path对象 / Path对象 . Path对象 / 字符串 或者 字符串 / Path对象 . 分解： parts 属性, 可以返回路径中的每一个部分 . joinpath： . joinpath(*other) 连接多个字符串到Path对象中 . p3 = Path(p2.parent, &#39;test.txt&#39;) p3 . PosixPath(&#39;/data/home/gaoc/data/99.test/test.txt&#39;) . p3 = p2.parent / &#39;test2.txt&#39; p3 . PosixPath(&#39;/data/home/gaoc/data/99.test/test2.txt&#39;) . p3 = p2.parent.joinpath(&#39;etc&#39;, &#39;init.d&#39;, Path(&#39;abc&#39;)) p3 . PosixPath(&#39;/data/home/gaoc/data/99.test/etc/init.d/abc&#39;) . p3.exists() . False . p3.is_file() . False . p3.is_dir() . False . # 将路径通过分隔符分割成一个元组 p2.parts . (&#39;/&#39;, &#39;data&#39;, &#39;home&#39;, &#39;gaoc&#39;, &#39;data&#39;, &#39;99.test&#39;, &#39;Untitled.ipynb.test&#39;) . 遍历文件夹 . p4 = p2.parent p4.iterdir() . &lt;generator object Path.iterdir at 0x7f6dfc0fbeb8&gt; . # 相当于os.listdir for file in p4.iterdir(): print(file) . /data/home/gaoc/data/99.test/.ipynb_checkpoints /data/home/gaoc/data/99.test/data-science /data/home/gaoc/data/99.test/Untitled.ipynb . list(p4.iterdir()) . [PosixPath(&#39;/data/home/gaoc/data/99.test/.ipynb_checkpoints&#39;), PosixPath(&#39;/data/home/gaoc/data/99.test/test&#39;), PosixPath(&#39;/data/home/gaoc/data/99.test/data-science&#39;), PosixPath(&#39;/data/home/gaoc/data/99.test/Untitled.ipynb&#39;)] . # 相当于os.listdir, 但是可以添加匹配条件 for file in p4.glob(&quot;*.ipynb&quot;): print(file) . /data/home/gaoc/data/99.test/Untitled.ipynb . list(p4.glob(&quot;*.ipynb&quot;)) . [PosixPath(&#39;/data/home/gaoc/data/99.test/Untitled.ipynb&#39;)] . # 相当于os.walk, 也可以添加匹配条件 for file in p4.rglob(&quot;*.ipynb&quot;): print(file) . /data/home/gaoc/data/99.test/Untitled.ipynb /data/home/gaoc/data/99.test/.ipynb_checkpoints/Untitled-checkpoint.ipynb . list(p4.rglob(&quot;*.ipynb&quot;)) . [PosixPath(&#39;/data/home/gaoc/data/99.test/Untitled.ipynb&#39;), PosixPath(&#39;/data/home/gaoc/data/99.test/.ipynb_checkpoints/Untitled-checkpoint.ipynb&#39;)] . 创建文件夹 . p5 = Path(p4,&#39;test&#39;) p5.mkdir(exist_ok=True) . p5 . PosixPath(&#39;/data/home/gaoc/data/99.test/test&#39;) . p5.mkdir((exist_ok=True, parents=True) # 递归创建文件目录 . 查看文件信息 . 获取详细信息 . p6 = Path(&#39;/data/home/gaoc/data/99.test/Untitled.ipynb&#39;) p6.stat() . os.stat_result(st_mode=33204, st_ino=57147394, st_dev=2096, st_nlink=1, st_uid=1003, st_gid=1003, st_size=636, st_atime=1555927128, st_mtime=1555926338, st_ctime=1555926338) . 文件大小 . p6.stat().st_size . 636 . 创建时间 . p6.stat().st_atime . 1555927128.4478571 . 修改时间 . p6.stat().st_mtime . 1555926338.8676176 . 参考 . https://www.jianshu.com/p/a820038e65c3 | https://www.cnblogs.com/hkcs/p/7773484.html |",
            "url": "https://ddebby.github.io/EbbyNotes/markdown/2019/05/07/Pathlib-Python%E7%9A%84%E8%B7%AF%E5%BE%84%E7%AE%A1%E7%90%86%E5%BA%93.html",
            "relUrl": "/markdown/2019/05/07/Pathlib-Python%E7%9A%84%E8%B7%AF%E5%BE%84%E7%AE%A1%E7%90%86%E5%BA%93.html",
            "date": " • May 7, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ddebby.github.io/EbbyNotes/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}